import java_cup.runtime.*;
import java.util.ArrayList;
import Tree.Declarations.*;
import Tree.Statemens.*;
import Tree.Expressions.*;

import Tree.Types.Custom;
import Tree.Types.Type;
import Tree.Types.Field;
import Tree.Types.Function;

import java.util.Hashtable;
import Semantic.Env;

parser code {:

    public void report_error(String message, Object info) {
   
       
        StringBuffer m = new StringBuffer("Error");
   
       
        if (info instanceof java_cup.runtime.Symbol) {
           
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
           
            if (s.left >= 0) {                
               
                m.append(" in line "+(s.left+1));   
               
                if (s.right >= 0)                    
                    
                    m.append(", column "+(s.right+1));
            }
        }
   
       
        m.append(" : "+message);
   
      
        System.err.println(m);
    }
   
  
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   


terminal          SEMICOLON, COLON, SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD, LBRACKET, RBRACKET, LPAR, RPAR, GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL, EQUAL, NOT_EQUAL, DOT, ASSIGN;
terminal          PROGRAM, FUNCTION, VAR, CASE, IF, ELSE, WHILE, FOR, REPEAT, THEN, TO, DO, OF, UNTIL, BEGIN, END, AND, OR, REF, WRITELN, READLN;
terminal          ARRAY, STRING, INT, BOOL, TYPE, CONST, NOT, FLOAT, VOID, CHAR, RECORD;

//Types
terminal int     INT_LITERAL;
terminal String  ID;
terminal String  STRING_LITERAL;
terminal boolean BOOLEAN_LITERAL;
terminal float   FLOAT_LITERAL;
terminal char    CHAR_LITERAL;

   

/* 
-------------------------------------
non terminal productions principales
-------------------------------------
*/

non terminal Declarations program;
non terminal Declarations block;
non terminal ArrayList<Declarations> decl_seq;
non terminal Declarations functions;
non terminal Declarations function;
//non terminal Declarations constant;
non terminal Declarations const_list;
non terminal Declarations const_decl;
non terminal Declarations type_list;
non terminal Declarations type_decl;
non terminal Declarations type_body;
non terminal Declarations var_decl;
non terminal Declarations decl_param;
non terminal Declarations decl_list;

non terminal Expression expr;
non terminal Expression expr_list;
non terminal Expression function_expr;
non terminal Expression factor;
non terminal Expression term;
non terminal Expression addition;
non terminal Expression literal;
non terminal Expression ids;
non terminal Expression accesor_list;
non terminal Id variable;

non terminal Statement stms; 
non terminal Statement statement;
non terminal Statement compound;
non terminal Statement function_stms;
non terminal Statement else;
non terminal Statement case_list;
non terminal Statement case;

non terminal Hashtable<String, Type> record_body;
non terminal Field params;
non terminal Field parameter;

non terminal Type type;

/* BEGIN */

program   ::= PROGRAM ID:i parameter:p SEMICOLON decl_seq:d compound:c DOT
              {: RESULT=new Program(new Id(i),p,d,c); :}
              |
              ;

decl_seq  ::= type_decl:t var_decl:v functions:f   
              {: 
                ArrayList<Declarations> d = new ArrayList<>();
                
                if(t!=null){
                    d.add(t);
                }
                if(v!=null){
                    d.add(v);
                }
                if(f!=null){
                    d.add(f);
                }

                RESULT=d;
              :}            
              ;

//--------DECLARATIONS--------------------
//constant  ::= CONST const_list:l
//              {: RESULT=l; :}
//              | 
//              ;

type_decl ::= TYPE type_list:t
              {: RESULT=t; :}
              |
              ;

var_decl  ::= VAR decl_list:d 
              {: RESULT=d; :}
              |
              ;

const_list::= const_decl:c const_list:l 
              {: 
                c.setNext(l);
                RESULT=c; 
              :}
              |
              ;

const_decl::= ID:i EQUAL literal:l SEMICOLON
              {: RESULT=new ConstDecl(new Id(i),l); :}
              ;

type_list ::= type_body:b type_list:l
              {: 
                b.setNext(l);
                RESULT=b; 
              :}
              |
              ;

functions ::= function:f functions:fs
              {: 
                f.setNext(fs);
                RESULT=f; 
              :}
              |
              ;

function  ::= FUNCTION ID:i parameter:p COLON type:t SEMICOLON var_decl:v compound:c SEMICOLON
              {: RESULT=new FunctionDecl(new Id(i),new Function(p, t),v,c);  :}
              ;
      
type_body ::= ID:i EQUAL type:t SEMICOLON
              {: RESULT=new TypeDecl(new Id(i),t); :}
              ;

parameter ::= LPAR params:p RPAR
              {: RESULT=p; :}
              |
              ;

params    ::= ID:i COLON type:t SEMICOLON params:p
              {:
                p.put(i,t);
                RESULT = p;
              :}
              | 
              ID:i COLON type:t
              {:        
                Field prs = new Field();
                prs.put(i,t);
                RESULT = prs;
              :} 
              |
              ;

ids       ::= ID:i SEMI ids:id 
              {:
                Id tmp = new Id(i);
                tmp.setNext(id);
                RESULT=tmp; 
              :} 
              |
              ID:i
              {: RESULT=new Id(i); :}
              ;

//--------STATEMENTS-----------
stms      ::= statement:s stms:s1
              {:
                s.setNext(s1);
                RESULT=s; 
              :}  
              |         
              ;

statement ::= function_stms:f SEMICOLON
              {: RESULT=f; :} 
              |
              variable:l ASSIGN expr:r SEMICOLON /* ARRAY ASSIGN OR ID ASSIGN*/
              {: RESULT=new Assign(l,r); :} 
              |
              IF expr:e THEN compound:c1 ELSE compound:c2
              {: RESULT=new IfStms(e,c1,c2); :} 
              |
              IF expr:e THEN compound:c 
              {: RESULT=new IfStms(e,c,null); :} 
              |
              CASE expr:ex OF 
                 case_list:cl
                 else:e
              END
              {: RESULT=new Switch(ex,cl,e); :} 
              |
              WHILE expr:e DO compound:c 
              {: 
                 RESULT = new WhileStms(e,c);
              :}  
              |
              FOR ID:i ASSIGN expr:r TO expr:e DO compound:c
              {: RESULT=new ForStms(new Assign(new Id(i),r),e,c); :}  
              |
              REPEAT compound:c UNTIL expr:e SEMICOLON   
              {: RESULT=new RepeatStms(e,c); :}  
              |
              WRITELN LPAR expr:e RPAR SEMICOLON 
              {: RESULT=new Write(e); :}
              |
              READLN LPAR variable:i RPAR SEMICOLON
              {: RESULT=new Read(i); :}
              ;

else      ::= ELSE compound:c
              {: RESULT=c; :}
              |
              ;

case_list ::= case:c case_list:l
              {: 
                c.setNext(l);
                RESULT=c; 
              :}
              |
              ;

case      ::= expr_list:l COLON compound:c
              {: RESULT= new Case(l,c); :}
              ;

compound  ::= BEGIN stms:s END
              {: RESULT=s; :}
              ;

//------- Expressions-------------------------
expr      ::= addition:l GREATER_THAN_OR_EQUAL addition:r
              {: RESULT= new GE(l,r); :}
              |
              addition:l GREATER_THAN addition:r
              {: RESULT= new G(l,r); :}
              |
              addition:l LESS_THAN addition:r
              {: RESULT= new L(l,r); :}
              |
              addition:l LESS_THAN_OR_EQUAL addition:r
              {: RESULT= new LE(l,r); :}
              |
              addition:l EQUAL addition:r
              {: RESULT= new Equal(l,r); :}
              |
              addition:l NOT_EQUAL addition:r
              {: RESULT= new NotEqual(l,r); :}
              |
              addition:a
              {: RESULT=a; :}
              ;

addition  ::= addition:l PLUS factor:r
              {: RESULT= new Sum(l,r); :}
              |
              addition:l MINUS factor:r
              {: RESULT= new Sub(l,r); :}
              |
              addition:l OR factor:r
              {: RESULT= new Or(l,r); :}
              | 
              factor:f
              {: RESULT=f; :}
              ;

factor    ::= factor:l TIMES term:r
              {: RESULT= new Mul(l,r); :}
              |
              factor:l DIVIDE term:r
              {: RESULT= new Div(l,r); :}
              |              
              factor:l MOD term:r
              {: RESULT= new Mod(l,r); :}
              |
              factor:l AND term:r
              {: RESULT= new And(l,r); :}
              |
              term:t
              {: RESULT=t; :}
              ;

term      ::= literal:l
              {: RESULT=l; :}
              | 
              NOT term:e
              {: RESULT=new Not(e); :}
              | 
              LPAR expr:e RPAR
              {: RESULT=e; :}  /* ((4+3)*5) */
              | 
              function_expr:f
              {: RESULT=f; :}
              |
              variable:v
              {: RESULT=v; :}
              ;

literal   ::= STRING_LITERAL:sl
              {: RESULT=new LitString(sl); :}
              | 
              BOOLEAN_LITERAL:bl
              {: RESULT=new LitBool(bl); :}
              | 
              FLOAT_LITERAL:fl
              {: RESULT=new LitFloat(fl); :}
              |
              CHAR_LITERAL:cl
              {: RESULT=new LitChar(cl); :}
              | 
              INT_LITERAL:il
              {: RESULT=new LitInteger(il); :}
              ;

function_expr ::= ID:i LPAR expr_list:e RPAR
              {: RESULT=new FunctionExpr(new Id(i),e); :}
              ;

function_stms ::= ID:i LPAR expr_list:e RPAR
              {: RESULT=new FunctionStms(new Id(i),e); :}
              ;
         
variable      ::= ID:i accesor_list:a
              {:
                Id tmp = new Id(i);
                tmp.setRight(a);
                RESULT=tmp; 
              :}    
              ;

accesor_list ::= 
              DOT ID:i accesor_list:r
              {: 
                FieldAccess tmp = new FieldAccess(new Id(i));
                tmp.setNext(r);
                RESULT=tmp; 
              :}    
              |
              LBRACKET expr_list:e RBRACKET accesor_list:r
              {: 
                ArrayExpr a = new ArrayExpr(e);
                a.setNext(r);
                RESULT=a; 
              :}    
              |  
              ;

expr_list     ::= expr:e SEMI expr_list:l
              {: 
                e.setNext(l);
                RESULT=e; 
              :}   
              | 
              expr:e
              {:    
                 RESULT=e; 
              :}    
              ;

type          ::= ARRAY LBRACKET expr_list:l RBRACKET OF type:t
              {: RESULT=new Tree.Types.Array(l,t); :}    
              |
              RECORD record_body:l END
              {: RESULT=new Tree.Types.Record(l); :}    
              |
              STRING
              {: RESULT=new Tree.Types.String(); :}    
              |
              CHAR
              {: RESULT=new Tree.Types.Char(); :}    
              |
              FLOAT
              {: RESULT=new Tree.Types.Float(); :}    
              |
              INT
              {: RESULT=new Tree.Types.Integer(); :}    
              |
              BOOL
              {: RESULT=new Tree.Types.Bool(); :}    
              |
              ID:i
              {:
                RESULT=new Custom(i); :}    
              |
              VOID 
              {: RESULT=new Tree.Types.Void(); :}    
              ;

decl_param    ::= ids:i COLON type:t SEMICOLON
              {: RESULT=new VarDecl(i, t); :}    
              ;

decl_list     ::= 
              decl_param:p decl_list:l
              {: 
                p.setNext(l); 
                RESULT=p;
              :}    
              |   
              ;
 

record_body  ::= 
              ID:i COLON type:t SEMICOLON record_body:r
              {: 
                if(r == null)
                {   
                   r = new Hashtable<>(); 
                }
                r.put(i, t);
                RESULT=r;
              :}    
              | 
              ;