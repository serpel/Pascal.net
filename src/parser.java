
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 15 23:48:09 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import Tree.Declarations.*;
import Tree.Statemens.*;
import Tree.Expressions.*;
import Tree.Types.Custom;
import Tree.Types.Type;
import Tree.Types.Field;
import Tree.Types.Function;
import java.util.Hashtable;
import Semantic.Env;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 15 23:48:09 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\011\000\002\002\004\000\002\002" +
    "\002\000\002\004\005\000\002\013\004\000\002\013\002" +
    "\000\002\015\004\000\002\015\002\000\002\010\004\000" +
    "\002\010\002\000\002\011\006\000\002\012\004\000\002" +
    "\012\002\000\002\005\004\000\002\005\002\000\002\006" +
    "\013\000\002\014\006\000\002\043\005\000\002\043\002" +
    "\000\002\042\007\000\002\042\005\000\002\042\002\000" +
    "\002\027\005\000\002\027\003\000\002\032\004\000\002" +
    "\032\002\000\002\033\004\000\002\033\006\000\002\033" +
    "\010\000\002\033\006\000\002\033\010\000\002\033\006" +
    "\000\002\033\012\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\036\004\000\002\036\002\000\002" +
    "\037\004\000\002\037\002\000\002\040\005\000\002\034" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\024\003\000\002\024\004\000\002\024\005\000" +
    "\002\024\003\000\002\024\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\022\006\000\002\035\006\000\002\031\004" +
    "\000\002\030\005\000\002\030\006\000\002\030\002\000" +
    "\002\021\005\000\002\021\003\000\002\044\010\000\002" +
    "\044\005\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\016\006\000\002\017\004\000" +
    "\002\017\002\000\002\041\007\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\002\uffff\030\005\001\002\000\004\002" +
    "\301\001\002\000\004\071\006\001\002\000\006\004\uffef" +
    "\016\007\001\002\000\006\017\uffec\071\272\001\002\000" +
    "\004\004\011\001\002\000\012\031\ufffc\032\ufffc\046\ufffc" +
    "\061\014\001\002\000\010\031\ufffa\032\242\046\ufffa\001" +
    "\002\000\004\046\143\001\002\000\012\031\ufff5\032\ufff5" +
    "\046\ufff5\071\015\001\002\000\004\024\021\001\002\000" +
    "\012\031\ufff5\032\ufff5\046\ufff5\071\015\001\002\000\010" +
    "\031\ufffd\032\ufffd\046\ufffd\001\002\000\010\031\ufff6\032" +
    "\ufff6\046\ufff6\001\002\000\024\055\024\056\027\057\022" +
    "\060\023\064\032\065\025\066\033\067\026\071\030\001" +
    "\002\000\006\004\uffb0\017\uffb0\001\002\000\006\004\uffaf" +
    "\017\uffaf\001\002\000\004\014\044\001\002\000\006\004" +
    "\uffad\017\uffad\001\002\000\006\047\uffa8\071\035\001\002" +
    "\000\006\004\uffb3\017\uffb3\001\002\000\006\004\uffae\017" +
    "\uffae\001\002\000\004\004\034\001\002\000\006\004\uffb1" +
    "\017\uffb1\001\002\000\006\004\uffb2\017\uffb2\001\002\000" +
    "\012\031\ufff1\032\ufff1\046\ufff1\071\ufff1\001\002\000\004" +
    "\005\040\001\002\000\004\047\037\001\002\000\006\004" +
    "\uffb4\017\uffb4\001\002\000\024\055\024\056\027\057\022" +
    "\060\023\064\032\065\025\066\033\067\026\071\030\001" +
    "\002\000\004\004\042\001\002\000\006\047\uffa8\071\035" +
    "\001\002\000\004\047\uffa9\001\002\000\022\016\052\063" +
    "\061\070\053\071\056\072\054\073\045\074\057\075\062" +
    "\001\002\000\056\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\050\uffc1\051\uffc1\001\002\000\004" +
    "\015\137\001\002\000\056\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\050\uffc8\051\uffc8\001\002" +
    "\000\056\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\050\uffc4\051\uffc4\001\002\000\056\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\050" +
    "\uffc3\051\uffc3\001\002\000\022\016\052\063\061\070\053" +
    "\071\056\072\054\073\045\074\057\075\062\001\002\000" +
    "\056\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\050\uffbe\051\uffbe\001\002\000\056\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\050\uffc2" +
    "\051\uffc2\001\002\000\046\004\uffd1\005\uffd1\006\uffd1\007" +
    "\117\010\113\015\uffd1\017\uffd1\020\122\021\120\022\116" +
    "\023\114\024\115\025\121\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\051\123\001\002\000\064\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\102\015" +
    "\uffb8\016\101\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\103\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\050\uffb8\051\uffb8\001\002\000\056\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\050\uffc0\051" +
    "\uffc0\001\002\000\056\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\073\012\072\013\070\015\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\050\071\051\uffcd\001\002\000" +
    "\022\016\052\063\061\070\053\071\056\072\054\073\045" +
    "\074\057\075\062\001\002\000\056\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\050\uffbf\051\uffbf" +
    "\001\002\000\056\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\050\uffc7\051\uffc7\001\002\000\012" +
    "\005\uffb6\006\065\015\uffb6\017\uffb6\001\002\000\022\016" +
    "\052\063\061\070\053\071\056\072\054\073\045\074\057" +
    "\075\062\001\002\000\010\005\uffb7\015\uffb7\017\uffb7\001" +
    "\002\000\056\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\050\uffc6\051\uffc6\001\002\000\022\016" +
    "\052\063\061\070\053\071\056\072\054\073\045\074\057" +
    "\075\062\001\002\000\022\016\052\063\061\070\053\071" +
    "\056\072\054\073\045\074\057\075\062\001\002\000\022" +
    "\016\052\063\061\070\053\071\056\072\054\073\045\074" +
    "\057\075\062\001\002\000\022\016\052\063\061\070\053" +
    "\071\056\072\054\073\045\074\057\075\062\001\002\000" +
    "\056\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\050\uffcc\051\uffcc\001\002\000\056\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\050\uffcb" +
    "\051\uffcb\001\002\000\056\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\050\uffc9\051\uffc9\001\002" +
    "\000\056\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\015\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\050\uffca\051\uffca\001\002\000\060\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\050\uffbb\051\uffbb\001\002\000\022\016\052\063\061" +
    "\070\053\071\056\072\054\073\045\074\057\075\062\001" +
    "\002\000\022\016\052\063\061\070\053\071\056\072\054" +
    "\073\045\074\057\075\062\001\002\000\004\071\104\001" +
    "\002\000\064\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\102\015\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\103" +
    "\027\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\050\uffb8\051" +
    "\uffb8\001\002\000\060\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\050\uffba\051\uffba\001" +
    "\002\000\004\015\107\001\002\000\064\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\102\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\103\027\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\050\uffb8\051\uffb8\001\002\000\060\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\027\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\050\uffb9\051\uffb9\001\002\000\004\017\112\001\002" +
    "\000\056\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\050\uffbd\051\uffbd\001\002\000\022\016\052" +
    "\063\061\070\053\071\056\072\054\073\045\074\057\075" +
    "\062\001\002\000\022\016\052\063\061\070\053\071\056" +
    "\072\054\073\045\074\057\075\062\001\002\000\022\016" +
    "\052\063\061\070\053\071\056\072\054\073\045\074\057" +
    "\075\062\001\002\000\022\016\052\063\061\070\053\071" +
    "\056\072\054\073\045\074\057\075\062\001\002\000\022" +
    "\016\052\063\061\070\053\071\056\072\054\073\045\074" +
    "\057\075\062\001\002\000\022\016\052\063\061\070\053" +
    "\071\056\072\054\073\045\074\057\075\062\001\002\000" +
    "\022\016\052\063\061\070\053\071\056\072\054\073\045" +
    "\074\057\075\062\001\002\000\022\016\052\063\061\070" +
    "\053\071\056\072\054\073\045\074\057\075\062\001\002" +
    "\000\022\016\052\063\061\070\053\071\056\072\054\073" +
    "\045\074\057\075\062\001\002\000\056\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\073\012\072\013\070\015" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\041\uffce\042\uffce\043\uffce\044\uffce\050\071\051" +
    "\uffce\001\002\000\032\004\uffd6\005\uffd6\006\uffd6\007\117" +
    "\010\113\015\uffd6\017\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\051\123\001\002\000\032\004\uffd2\005\uffd2\006\uffd2" +
    "\007\117\010\113\015\uffd2\017\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\051\123\001\002\000\032\004\uffd7\005\uffd7" +
    "\006\uffd7\007\117\010\113\015\uffd7\017\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\051\123\001\002\000\056\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\073\012\072\013" +
    "\070\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\050" +
    "\071\051\uffd0\001\002\000\032\004\uffd5\005\uffd5\006\uffd5" +
    "\007\117\010\113\015\uffd5\017\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\051\123\001\002\000\032\004\uffd3\005\uffd3" +
    "\006\uffd3\007\117\010\113\015\uffd3\017\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\051\123\001\002\000\032\004\uffd4" +
    "\005\uffd4\006\uffd4\007\117\010\113\015\uffd4\017\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\051\123\001\002\000\056" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\073\012" +
    "\072\013\070\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\050\071\051\uffcf\001\002\000\004\017\136\001\002" +
    "\000\056\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\050\uffc5\051\uffc5\001\002\000\004\044\140" +
    "\001\002\000\024\055\024\056\027\057\022\060\023\064" +
    "\032\065\025\066\033\067\026\071\030\001\002\000\006" +
    "\004\uffb5\017\uffb5\001\002\000\004\026\241\001\002\000" +
    "\024\033\156\034\153\036\144\037\146\040\145\047\uffe8" +
    "\053\151\054\147\071\154\001\002\000\022\016\052\063" +
    "\061\070\053\071\056\072\054\073\045\074\057\075\062" +
    "\001\002\000\004\046\143\001\002\000\004\071\223\001" +
    "\002\000\004\016\216\001\002\000\004\047\215\001\002" +
    "\000\004\016\211\001\002\000\004\027\206\001\002\000" +
    "\022\016\052\063\061\070\053\071\056\072\054\073\045" +
    "\074\057\075\062\001\002\000\012\014\102\016\176\026" +
    "\103\027\uffb8\001\002\000\024\033\156\034\153\036\144" +
    "\037\146\040\145\047\uffe8\053\151\054\147\071\154\001" +
    "\002\000\022\016\052\063\061\070\053\071\056\072\054" +
    "\073\045\074\057\075\062\001\002\000\004\004\160\001" +
    "\002\000\024\033\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\047\uffe7\053\uffe7\054\uffe7\071\uffe7\001\002\000\004\044" +
    "\162\001\002\000\026\016\052\035\uffda\047\uffda\063\061" +
    "\070\053\071\056\072\054\073\045\074\057\075\062\001" +
    "\002\000\026\016\052\035\uffda\047\uffda\063\061\070\053" +
    "\071\056\072\054\073\045\074\057\075\062\001\002\000" +
    "\004\005\172\001\002\000\006\035\166\047\uffdc\001\002" +
    "\000\004\046\143\001\002\000\004\047\170\001\002\000" +
    "\024\033\uffe3\034\uffe3\036\uffe3\037\uffe3\040\uffe3\047\uffe3" +
    "\053\uffe3\054\uffe3\071\uffe3\001\002\000\004\047\uffdd\001" +
    "\002\000\004\046\143\001\002\000\026\016\uffd9\035\uffd9" +
    "\047\uffd9\063\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\075\uffd9\001\002\000\006\035\uffdb\047\uffdb\001\002" +
    "\000\004\047\uffe9\001\002\000\022\016\052\063\061\070" +
    "\053\071\056\072\054\073\045\074\057\075\062\001\002" +
    "\000\004\017\200\001\002\000\004\004\uffbc\001\002\000" +
    "\004\041\202\001\002\000\004\046\143\001\002\000\026" +
    "\033\uffe4\034\uffe4\035\204\036\uffe4\037\uffe4\040\uffe4\047" +
    "\uffe4\053\uffe4\054\uffe4\071\uffe4\001\002\000\004\046\143" +
    "\001\002\000\024\033\uffe5\034\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\047\uffe5\053\uffe5\054\uffe5\071\uffe5\001\002\000\022" +
    "\016\052\063\061\070\053\071\056\072\054\073\045\074" +
    "\057\075\062\001\002\000\004\004\210\001\002\000\024" +
    "\033\uffe6\034\uffe6\036\uffe6\037\uffe6\040\uffe6\047\uffe6\053" +
    "\uffe6\054\uffe6\071\uffe6\001\002\000\022\016\052\063\061" +
    "\070\053\071\056\072\054\073\045\074\057\075\062\001" +
    "\002\000\004\017\213\001\002\000\004\004\214\001\002" +
    "\000\024\033\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\047" +
    "\uffdf\053\uffdf\054\uffdf\071\uffdf\001\002\000\052\004\uffd8" +
    "\016\uffd8\026\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\045\uffd8\047\uffd8\053\uffd8\054\uffd8\063\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\001" +
    "\002\000\004\071\217\001\002\000\010\014\102\017\uffb8" +
    "\026\103\001\002\000\004\017\221\001\002\000\004\004" +
    "\222\001\002\000\024\033\uffde\034\uffde\036\uffde\037\uffde" +
    "\040\uffde\047\uffde\053\uffde\054\uffde\071\uffde\001\002\000" +
    "\004\027\224\001\002\000\022\016\052\063\061\070\053" +
    "\071\056\072\054\073\045\074\057\075\062\001\002\000" +
    "\004\042\226\001\002\000\022\016\052\063\061\070\053" +
    "\071\056\072\054\073\045\074\057\075\062\001\002\000" +
    "\004\043\230\001\002\000\004\046\143\001\002\000\024" +
    "\033\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1\047\uffe1\053" +
    "\uffe1\054\uffe1\071\uffe1\001\002\000\004\045\233\001\002" +
    "\000\022\016\052\063\061\070\053\071\056\072\054\073" +
    "\045\074\057\075\062\001\002\000\004\004\235\001\002" +
    "\000\024\033\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\047" +
    "\uffe0\053\uffe0\054\uffe0\071\uffe0\001\002\000\004\043\237" +
    "\001\002\000\004\046\143\001\002\000\024\033\uffe2\034" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\047\uffe2\053\uffe2\054\uffe2" +
    "\071\uffe2\001\002\000\004\002\001\001\002\000\010\031" +
    "\uffaa\046\uffaa\071\260\001\002\000\006\031\246\046\ufff3" +
    "\001\002\000\006\031\246\046\ufff3\001\002\000\004\046" +
    "\ufffe\001\002\000\004\071\247\001\002\000\006\005\uffef" +
    "\016\007\001\002\000\004\005\251\001\002\000\024\055" +
    "\024\056\027\057\022\060\023\064\032\065\025\066\033" +
    "\067\026\071\030\001\002\000\004\004\253\001\002\000" +
    "\006\032\242\046\ufffa\001\002\000\004\046\143\001\002" +
    "\000\004\004\256\001\002\000\006\031\ufff2\046\ufff2\001" +
    "\002\000\004\046\ufff4\001\002\000\006\005\uffea\006\270" +
    "\001\002\000\004\005\265\001\002\000\006\031\ufffb\046" +
    "\ufffb\001\002\000\010\031\uffaa\046\uffaa\071\260\001\002" +
    "\000\006\031\uffab\046\uffab\001\002\000\024\055\024\056" +
    "\027\057\022\060\023\064\032\065\025\066\033\067\026" +
    "\071\030\001\002\000\004\004\267\001\002\000\010\031" +
    "\uffac\046\uffac\071\uffac\001\002\000\004\071\260\001\002" +
    "\000\004\005\uffeb\001\002\000\004\005\275\001\002\000" +
    "\004\017\274\001\002\000\006\004\ufff0\005\ufff0\001\002" +
    "\000\024\055\024\056\027\057\022\060\023\064\032\065" +
    "\025\066\033\067\026\071\030\001\002\000\006\004\277" +
    "\017\uffed\001\002\000\006\017\uffec\071\272\001\002\000" +
    "\004\017\uffee\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\007\001\001\000\004\042\272" +
    "\001\001\000\002\001\001\000\006\004\012\013\011\001" +
    "\001\000\004\015\242\001\001\000\004\034\141\001\001" +
    "\000\006\012\016\014\015\001\001\000\002\001\001\000" +
    "\006\012\017\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\040\001\001\000\002\001\001\000\004" +
    "\041\042\001\001\000\002\001\001\000\022\020\063\021" +
    "\045\022\047\023\057\024\046\025\054\026\062\031\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\134" +
    "\022\047\023\057\024\046\025\054\026\062\031\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\047\024\066\026\062\031\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\020\063\021\065\022\047\023\057\024\046\025\054" +
    "\026\062\031\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\047\024\076\026\062\031\050\001\001" +
    "\000\012\022\047\024\075\026\062\031\050\001\001\000" +
    "\012\022\047\024\074\026\062\031\050\001\001\000\012" +
    "\022\047\024\073\026\062\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\020\063\021\110\022\047\023" +
    "\057\024\046\025\054\026\062\031\050\001\001\000\022" +
    "\020\063\021\105\022\047\023\057\024\046\025\054\026" +
    "\062\031\050\001\001\000\002\001\001\000\004\030\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\047\023\133\024\046\026\062\031" +
    "\050\001\001\000\016\022\047\023\057\024\046\025\132" +
    "\026\062\031\050\001\001\000\016\022\047\023\057\024" +
    "\046\025\131\026\062\031\050\001\001\000\016\022\047" +
    "\023\057\024\046\025\130\026\062\031\050\001\001\000" +
    "\014\022\047\023\127\024\046\026\062\031\050\001\001" +
    "\000\016\022\047\023\057\024\046\025\126\026\062\031" +
    "\050\001\001\000\016\022\047\023\057\024\046\025\125" +
    "\026\062\031\050\001\001\000\016\022\047\023\057\024" +
    "\046\025\124\026\062\031\050\001\001\000\014\022\047" +
    "\023\123\024\046\026\062\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\151\032\147" +
    "\033\154\035\156\001\001\000\020\020\235\022\047\023" +
    "\057\024\046\025\054\026\062\031\050\001\001\000\004" +
    "\034\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\200\022\047\023\057\024\046\025\054\026\062\031" +
    "\050\001\001\000\004\030\077\001\001\000\012\031\151" +
    "\032\174\033\154\035\156\001\001\000\020\020\160\022" +
    "\047\023\057\024\046\025\054\026\062\031\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\063\021\163\022\047\023\057\024\046\025\054" +
    "\026\062\031\050\037\164\040\162\001\001\000\026\020" +
    "\063\021\163\022\047\023\057\024\046\025\054\026\062" +
    "\031\050\037\173\040\162\001\001\000\002\001\001\000" +
    "\004\036\166\001\001\000\004\034\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\020\063\021\176\022\047\023\057\024" +
    "\046\025\054\026\062\031\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\202\001" +
    "\001\000\002\001\001\000\004\034\204\001\001\000\002" +
    "\001\001\000\020\020\206\022\047\023\057\024\046\025" +
    "\054\026\062\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\211\022\047\023\057\024\046\025" +
    "\054\026\062\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\217\001\001\000\004\030\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\224\022\047\023\057\024\046\025\054\026\062" +
    "\031\050\001\001\000\002\001\001\000\020\020\226\022" +
    "\047\023\057\024\046\025\054\026\062\031\050\001\001" +
    "\000\002\001\001\000\004\034\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\233\022\047\023\057" +
    "\024\046\025\054\026\062\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\262\017\261\027\260\001\001\000\006\005\244\006\243" +
    "\001\001\000\006\005\256\006\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\247\001\001\000\002" +
    "\001\001\000\004\044\251\001\001\000\002\001\001\000" +
    "\004\015\253\001\001\000\004\034\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\262" +
    "\017\263\027\260\001\001\000\002\001\001\000\004\044" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\275\001\001" +
    "\000\002\001\001\000\004\042\277\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
   
       
        StringBuffer m = new StringBuffer("Error");
   
       
        if (info instanceof java_cup.runtime.Symbol) {
           
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
           
            if (s.left >= 0) {                
               
                m.append(" in line "+(s.left+1));   
               
                if (s.right >= 0)                    
                    
                    m.append(", column "+(s.right+1));
            }
        }
   
       
        m.append(" : "+message);
   
      
        System.err.println(m);
    }
   
  
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // record_body ::= 
            {
              Hashtable<String,Type> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // record_body ::= ID COLON type SEMICOLON record_body 
            {
              Hashtable<String,Type> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Hashtable<String,Type> r = (Hashtable<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(r == null)
                {   
                   r = new Hashtable<>(); 
                }
                r.put(i, t);
                RESULT=r;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // decl_list ::= 
            {
              Declarations RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decl_list ::= decl_param decl_list 
            {
              Declarations RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations p = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declarations l = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                p.setNext(l); 
                RESULT=p;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // decl_param ::= ids COLON type SEMICOLON 
            {
              Declarations RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new VarDecl(i, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT=new Tree.Types.Void(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= ID 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new Custom(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT=new Tree.Types.Bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT=new Tree.Types.Integer(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT=new Tree.Types.Float(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT=new Tree.Types.Char(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT=new Tree.Types.String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= RECORD record_body END 
            {
              Type RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Hashtable<String,Type> l = (Hashtable<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Tree.Types.Record(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= ARRAY LBRACKET expr_list RBRACKET OF type 
            {
              Type RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Tree.Types.Array(l,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_list ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
                 RESULT=e; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_list ::= expr SEMI expr_list 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                e.setNext(l);
                RESULT=e; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // accesor_list ::= 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // accesor_list ::= LBRACKET expr_list RBRACKET accesor_list 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                ArrayExpr a = new ArrayExpr(e);
                a.setNext(r);
                RESULT=a; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // accesor_list ::= DOT ID accesor_list 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                FieldAccess tmp = new FieldAccess(new Id(i));
                tmp.setNext(r);
                RESULT=tmp; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable ::= ID accesor_list 
            {
              Id RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Id tmp = new Id(i);
                tmp.setRight(a);
                RESULT=tmp; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_stms ::= ID LPAR expr_list RPAR 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FunctionStms(new Id(i),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stms",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // function_expr ::= ID LPAR expr_list RPAR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FunctionExpr(new Id(i),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= INT_LITERAL 
            {
              Expression RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int il = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LitInteger(il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= CHAR_LITERAL 
            {
              Expression RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char cl = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LitChar(cl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= FLOAT_LITERAL 
            {
              Expression RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float fl = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LitFloat(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean bl = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LitBool(bl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LitString(sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id v = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= function_expr 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= LPAR expr RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= NOT term 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= term 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= factor AND term 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new And(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= factor MOD term 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Mod(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= factor DIVIDE term 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Div(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= factor TIMES term 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Mul(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addition ::= factor 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addition ::= addition OR factor 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Or(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // addition ::= addition MINUS factor 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Sub(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // addition ::= addition PLUS factor 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Sum(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= addition 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= addition NOT_EQUAL addition 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new NotEqual(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= addition EQUAL addition 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Equal(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= addition LESS_THAN_OR_EQUAL addition 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new LE(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= addition LESS_THAN addition 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new L(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= addition GREATER_THAN addition 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new G(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= addition GREATER_THAN_OR_EQUAL addition 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new GE(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // compound ::= BEGIN stms END 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // case ::= expr_list COLON compound 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Case(l,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // case_list ::= 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // case_list ::= case case_list 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement l = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                c.setNext(l);
                RESULT=c; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // else ::= 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // else ::= ELSE compound 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= READLN LPAR variable RPAR SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Read(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= WRITELN LPAR expr RPAR SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Write(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= REPEAT compound UNTIL expr SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new RepeatStms(e,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= FOR ID ASSIGN expr TO expr DO compound 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ForStms(new Assign(new Id(i),r),e,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= WHILE expr DO compound 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                 RESULT = new WhileStms(e,c);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= CASE expr OF case_list else END 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement cl = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Switch(ex,cl,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IF expr THEN compound 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new IfStms(e,c,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= IF expr THEN compound ELSE compound 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement c1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new IfStms(e,c1,c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= variable ASSIGN expr SEMICOLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id l = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Assign(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= function_stms SEMICOLON 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stms ::= 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stms",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stms ::= statement stms 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                s.setNext(s1);
                RESULT=s; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stms",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ids ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Id(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ids ::= ID SEMI ids 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression id = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Id tmp = new Id(i);
                tmp.setNext(id);
                RESULT=tmp; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // params ::= 
            {
              Field RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // params ::= ID COLON type 
            {
              Field RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		        
                Field prs = new Field();
                prs.put(i,t);
                RESULT = prs;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // params ::= ID COLON type SEMICOLON params 
            {
              Field RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field p = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                p.put(i,t);
                RESULT = p;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameter ::= 
            {
              Field RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameter ::= LPAR params RPAR 
            {
              Field RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Field p = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_body ::= ID EQUAL type SEMICOLON 
            {
              Declarations RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new TypeDecl(new Id(i),t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= FUNCTION ID parameter COLON type SEMICOLON var_decl compound SEMICOLON 
            {
              Declarations RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Field p = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarations v = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FunctionDecl(new Id(i),new Function(p, t),v,c);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functions ::= 
            {
              Declarations RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // functions ::= function functions 
            {
              Declarations RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations f = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declarations fs = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                f.setNext(fs);
                RESULT=f; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= 
            {
              Declarations RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_list ::= type_body type_list 
            {
              Declarations RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations b = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declarations l = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                b.setNext(l);
                RESULT=b; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_decl ::= ID EQUAL literal SEMICOLON 
            {
              Declarations RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ConstDecl(new Id(i),l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_list ::= 
            {
              Declarations RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= const_decl const_list 
            {
              Declarations RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations c = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declarations l = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                c.setNext(l);
                RESULT=c; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decl ::= 
            {
              Declarations RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_decl ::= VAR decl_list 
            {
              Declarations RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_decl ::= 
            {
              Declarations RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_decl ::= TYPE type_list 
            {
              Declarations RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declarations t = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_seq ::= type_decl var_decl functions 
            {
              ArrayList<Declarations> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarations t = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations v = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declarations f = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                ArrayList<Declarations> d = new ArrayList<>();
                
                if(t!=null){
                    d.add(t);
                }
                if(v!=null){
                    d.add(v);
                }
                if(f!=null){
                    d.add(f);
                }

                RESULT=d;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Declarations RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations start_val = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID parameter SEMICOLON decl_seq compound DOT 
            {
              Declarations RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Field p = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Declarations> d = (ArrayList<Declarations>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Program(new Id(i),p,d,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

